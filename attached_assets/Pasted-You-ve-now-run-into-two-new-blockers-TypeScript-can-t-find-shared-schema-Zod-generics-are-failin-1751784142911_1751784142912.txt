You’ve now run into two new blockers:

TypeScript can’t find @shared/schema

Zod generics are failing to satisfy your ZodType<any,any,any> constraint

Node still can’t resolve the dist/server/index import at runtime (because of the alias)

Here’s how to fix all three in one sweep:

1. Teach TypeScript about your @shared alias
In tsconfig.json, under compilerOptions, add a baseUrl and a paths mapping so that

ts
Copy
Edit
import { Foo } from "@shared/schema"
will map to src/shared/schema.ts:

diff
Copy
Edit
 {
   "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@shared/*": ["src/shared/*"]
+    },
     "rootDir": "src",
     "outDir": "dist",
-    "module": "CommonJS",
-    "moduleResolution": "NodeNext",
+    "module": "NodeNext",
+    "moduleResolution": "NodeNext",
     "target": "ES2020",
     "esModuleInterop": true,
     "forceConsistentCasingInFileNames": true,
     "strict": true,
     "skipLibCheck": true
   },
   "include": ["src"]
 }
This makes the compiler happy—but Node itself doesn’t read your tsconfig paths.

2. Resolve aliases at runtime with tsconfig-paths
Install the helper:

bash
Copy
Edit
npm install tsconfig-paths --save
Then tweak your package.json scripts to preload it before running your built code:

diff
Copy
Edit
 {
   "scripts": {
-    "test": "npm run build && node dist/index.js --health",
+    "test": "npm run build && node -r tsconfig-paths/register dist/index.js --health",
     "build": "tsc -p tsconfig.json"
   }
 }
That -r tsconfig-paths/register will read your tsconfig.json and hook into Node’s module loader, so @shared/schema becomes dist/shared/schema.js under the hood.

Alternative: ditch the alias and switch to relative imports:

ts
Copy
Edit
import { Foo } from "../shared/schema";
3. Update your Zod generic constraints
You’re getting errors like:

swift
Copy
Edit
Type 'ZodObject<{},…>' does not satisfy 'ZodType<any,any,any>'
That usually means your function or wrapper is declared as:

ts
Copy
Edit
function doSomething<S extends z.ZodType<any,any,any>>(schema: S) { … }
but Zod’s built-in alias for “any schema” is ZodTypeAny. Change your constraint to:

ts
Copy
Edit
function doSomething<S extends z.ZodTypeAny>(schema: S) {
  // now any ZodObject, ZodString, ZodEffects, etc. will fit
}
Or, if you really only want object schemas:

ts
Copy
Edit
function defineRoute<S extends z.ZodObject<any>>(schema: S) {
  // only accepts `z.object({ … })` schemas
}
Using z.ZodTypeAny (or the more specific z.ZodObject<…>) will eliminate those TS2307/TS2344 complaints.