name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  repository_dispatch:
    types: [payments-sdk-published, design-system-updated, webrtc-client-updated]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint
        
      - name: Build project
        run: npm run build
        
      - name: Run tests
        run: npm run test

  smoke-test:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Build Docker image
        run: docker build -t backend-test .
        
      - name: Start server with Docker
        run: |
          docker run -d \
            --name backend-server \
            --network host \
            -e DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db" \
            -e NODE_ENV="production" \
            -e STRIPE_SECRET_KEY="sk_test_dummy" \
            -e STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
            -e LIVEKIT_URL="wss://test.livekit.cloud" \
            -e LIVEKIT_API_KEY="test_key" \
            -e LIVEKIT_API_SECRET="test_secret" \
            -p 5000:5000 \
            backend-test
            
      - name: Wait for server to start
        run: |
          timeout 30 sh -c 'until curl -f http://localhost:5000/health; do sleep 1; done'
          
      - name: Run smoke tests
        run: npm run test:smoke
        
      - name: Stop Docker container
        if: always()
        run: docker stop backend-server && docker rm backend-server

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, smoke-test]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: 'v3.12.0'
        
    - name: Deploy to staging with Helm
      run: |
        helm upgrade --install backend-staging ./helm-chart \
          --namespace backend-staging \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set env.FRONTEND_URL="https://staging.example.com" \
          --set secrets.database.name="backend-staging-database-secret" \
          --set secrets.stripe.secretKey.name="backend-staging-stripe-secret" \
          --set secrets.stripe.webhookSecret.name="backend-staging-stripe-secret" \
          --set secrets.livekit.url.name="backend-staging-livekit-secret" \
          --set secrets.livekit.apiKey.name="backend-staging-livekit-secret" \
          --set secrets.livekit.apiSecret.name="backend-staging-livekit-secret" \
          --set secrets.github.token.name="backend-staging-github-secret" \
          --wait

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: 'v3.12.0'
        
    - name: Extract tag version
      id: tag
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
    - name: Deploy to production with Helm
      run: |
        helm upgrade --install backend-production ./helm-chart \
          --namespace backend-production \
          --create-namespace \
          --set image.tag=${{ steps.tag.outputs.version }} \
          --set env.FRONTEND_URL="https://app.example.com" \
          --set secrets.database.name="backend-production-database-secret" \
          --set secrets.stripe.secretKey.name="backend-production-stripe-secret" \
          --set secrets.stripe.webhookSecret.name="backend-production-stripe-secret" \
          --set secrets.livekit.url.name="backend-production-livekit-secret" \
          --set secrets.livekit.apiKey.name="backend-production-livekit-secret" \
          --set secrets.livekit.apiSecret.name="backend-production-livekit-secret" \
          --set secrets.github.token.name="backend-production-github-secret" \
          --wait

  publish-npm:
    name: Publish NPM Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && secrets.NPM_TOKEN
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  trigger-frontend-orchestrator:
    name: Trigger Frontend Orchestrator
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.event_name == 'repository_dispatch' && (github.event.action == 'payments-sdk-published' || github.event.action == 'design-system-updated' || github.event.action == 'webrtc-client-updated')
    
    steps:
      - name: Trigger Frontend Agent
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.FRONTEND_PAT || secrets.GITHUB_TOKEN }}
          repository: fanoo2/frontend
          event-type: backend-orchestrator-trigger
          client-payload: |
            {
              "backend_version": "${{ github.sha }}",
              "payments_sdk_version": "${{ github.event.client_payload.version }}",
              "design_system_version": "${{ github.event.client_payload.design_system_version }}",
              "webrtc_client_version": "${{ github.event.client_payload.webrtc_client_version }}",
              "trigger_source": "${{ github.event.action }}"
            }

  trigger-design-system-dispatch:
    name: Trigger Design System Updates
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger Design System Repository
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.DESIGN_SYSTEM_PAT || secrets.GITHUB_TOKEN }}
          repository: fanoo2/design-system
          event-type: backend-updated
          client-payload: |
            {
              "backend_version": "${{ github.sha }}",
              "backend_tag": "${{ github.ref_name }}",
              "trigger_source": "backend-push"
            }

  trigger-webrtc-client-dispatch:
    name: Trigger WebRTC Client Updates
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger WebRTC Client Repository
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.WEBRTC_CLIENT_PAT || secrets.GITHUB_TOKEN }}
          repository: fanoo2/webrtc-client
          event-type: backend-updated
          client-payload: |
            {
              "backend_version": "${{ github.sha }}",
              "backend_tag": "${{ github.ref_name }}",
              "trigger_source": "backend-push"
            }